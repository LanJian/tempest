// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.CPanel = (function(_super) {

    __extends(CPanel, _super);

    function CPanel(panelPosition, panelSize, state) {
      this.panelPosition = panelPosition;
      this.panelSize = panelSize;
      this.state = state;
      Common.cPanel = this;
      this.userPanel = [];
      CPanel.__super__.constructor.call(this, this.panelPosition.x, this.panelPosition.y, this.panelSize.w, this.panelSize.h);
      this.init();
      this.updatePanel();
    }

    CPanel.prototype.init = function() {
      this.initBackground();
      this.initItemPanel();
      this.initLoadoutPanel();
      this.initActionPanel();
      this.initStatsPanel();
      this.initProfilePanel();
      return this.children = this.children.concat(this.userPanel);
    };

    CPanel.prototype.initBackground = function() {
      this.bgImage = new Coffee2D.Image('img/HUD.png');
      this.bgImage.setSize(this.size.w, this.size.h);
      return this.addChild(this.bgImage);
    };

    CPanel.prototype.initProfilePanel = function() {
      this.pp = new ProfilePanel({
        x: this.size.w * 0.022,
        y: this.size.h * 0.13
      }, {
        w: this.size.w * 0.14,
        h: this.size.h * 0.85
      });
      return this.userPanel.push(this.pp);
    };

    CPanel.prototype.initItemPanel = function() {
      this.ip = new ItemPanel({
        x: this.size.w * 0.45,
        y: this.size.h * 0.3
      }, {
        w: this.size.w * 0.55,
        h: this.size.h * 0.7
      }, this.state);
      return this.userPanel.push(this.ip);
    };

    CPanel.prototype.initStatsPanel = function() {
      this.sp = new StatsPanel({
        x: this.size.w * 0.18,
        y: this.size.h * 0.3
      }, {
        w: this.size.w * 0.12,
        h: this.size.h * 0.7
      }, this.state);
      return this.userPanel.push(this.sp);
    };

    CPanel.prototype.initActionPanel = function() {
      this.ap = new ActionPanel({
        x: this.size.w * 0.32,
        y: this.size.h * 0.3
      }, {
        w: this.size.w * 0.1,
        h: this.size.h * 0.7
      }, this.state);
      return this.userPanel.push(this.ap);
    };

    CPanel.prototype.initLoadoutPanel = function() {
      var archer, item, knight, soldier;
      this.lp = new LoadoutPanel({
        x: this.size.w * 0.2,
        y: 0
      }, {
        w: this.size.w * 0.8,
        h: this.size.h * 0.3
      });
      this.userPanel.push(this.lp);
      item = [];
      soldier = new Soldier(20, 20);
      item.push(soldier);
      soldier = new Soldier(20, 20);
      item.push(soldier);
      archer = new Archer(20, 20);
      item.push(archer);
      archer = new Archer(20, 20);
      item.push(archer);
      knight = new Knight(20, 20);
      item.push(knight);
      item.push(Assets.poisonTippedSword);
      item.push(Assets.crossbow);
      item.push(Assets.lightSpear);
      item.push(Assets.helmet);
      item.push(Assets.knightPlateArmor);
      return Common.loadout = item;
    };

    CPanel.prototype.initLoad = function() {
      var i, soldier, _i;
      for (i = _i = 0; _i <= 3; i = ++_i) {
        console.log('createNew Soldier');
        soldier = new Soldier(20, 20);
        item.push(soldier);
      }
      item.push(armor);
      item.push(armor2);
      return Common.loadout = item;
    };

    CPanel.prototype.updatePanel = function() {
      var panel, _i, _len, _ref, _results;
      _ref = this.userPanel;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        panel = _ref[_i];
        _results.push(panel.updatePanel());
      }
      return _results;
    };

    return CPanel;

  })(Component);

}).call(this);
