// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.BFTile = (function(_super) {

    __extends(BFTile, _super);

    function BFTile(spritesheet, index, row, col, heightOffset, type, state) {
      this.spritesheet = spritesheet;
      this.index = index;
      this.row = row;
      this.col = col;
      this.heightOffset = heightOffset != null ? heightOffset : 0;
      this.type = type;
      this.state = state;
      BFTile.__super__.constructor.call(this, this.spritesheet, this.index, this.heightOffset);
      this.occupiedBy = null;
      this.tileMoveCost = 1;
      this.walkable = true;
      this.init();
    }

    BFTile.prototype.init = function() {
      this.addListener('click', this.onClick.bind(this));
      switch (this.type) {
        case 'water':
          this.walkable = false;
          return this.tileMoveCost = 3;
      }
    };

    BFTile.prototype.distanceTo = function(target) {
      return Math.abs(target.row - this.row) + Math.abs(target.col - this.col);
    };

    BFTile.prototype.onClick = function(evt) {
      var newEvt, tooltipEvt, type;
      tooltipEvt = {
        type: 'updateTooltip'
      };
      this.dispatchEvent(tooltipEvt);
      switch (this.state.mode) {
        case 'select':
          switch (this.state.type) {
            case 'normal':
              if (this.state.mode !== 'move') {
                console.log('occupiedBy', this);
                type = this.occupiedBy && this.occupiedBy instanceof Unit ? 'unitSelected' : 'tileSelected';
                Common.selected = this.occupiedBy;
                Common.cPanel.updatePanel();
                newEvt = {
                  type: type,
                  target: this.occupiedBy
                };
                return this.dispatchEvent(newEvt);
              }
              break;
            case 'loadout':
              if (this.state.mode !== 'move') {
                newEvt = {
                  type: 'applyLoadout',
                  target: this.occupiedBy
                };
                return this.dispatchEvent(newEvt);
              }
          }
          break;
        case 'attack':
          if (this.state.mode !== 'move') {
            newEvt = {
              type: 'unitAttack',
              target: this.occupiedBy
            };
            return this.dispatchEvent(newEvt);
          }
          break;
        case 'move':
          newEvt = {
            type: 'unitMove',
            row: this.row,
            col: this.col
          };
          this.dispatchEvent(newEvt);
          return this.state.mode = 'select';
      }
    };

    BFTile.prototype.onContact = function(unit) {
      switch (this.type) {
        case "":
          break;
      }
    };

    BFTile.prototype.setType = function(type) {
      this.type = type;
      switch (this.type) {
        case "water":
          this.tileMoveCost = 2;
          return this.walkable = false;
        default:
          return this.walkable = true;
      }
    };

    BFTile.prototype.onLeave = function(unit) {
      switch (this.type) {
        case "":
          break;
      }
    };

    return BFTile;

  })(Tile);

}).call(this);
