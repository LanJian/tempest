// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.LoadoutPanel = (function(_super) {

    __extends(LoadoutPanel, _super);

    function LoadoutPanel(panelPosition, panelSize, loadoutItems) {
      this.panelPosition = panelPosition;
      this.panelSize = panelSize;
      this.loadoutItems = loadoutItems;
      Common.loadoutPanel = this;
      LoadoutPanel.__super__.constructor.call(this, this.panelPosition.x, this.panelPosition.y, this.panelSize.w, this.panelSize.h);
      this.iconSize = {
        w: 30,
        h: 30
      };
      this.permUI = [];
      this.init();
      this.debug();
    }

    LoadoutPanel.prototype.init = function() {
      this.initBackground();
      return this.initText();
    };

    LoadoutPanel.prototype.initBackground = function() {
      this.bgImage = new Coffee2D.Image('img/loadoutBackground.png');
      this.bgImage.setSize(this.panelSize.w, this.panelSize.h);
      return this.permUI.push(this.bgImage);
    };

    LoadoutPanel.prototype.initText = function() {
      this.ipText = new Coffee2D.Text("IP: " + (Common.battleField.getPlayerIP(Common.player)), 'blue', '20px Verdana');
      this.ipText.setPosition(10, 25);
      this.permUI.push(this.ipText);
      return this.addListener('ipValueChange', (function() {
        this.ipText.text = "IP: " + (Common.battleField.getPlayerIP(Common.player));
        return this.ipText.setPosition(10, 25);
      }).bind(this));
    };

    LoadoutPanel.prototype.debug = function() {};

    LoadoutPanel.prototype.updatePanel = function() {
      var c, i, icon, item, x, _i, _j, _len, _ref, _ref1, _results;
      this.children = [];
      _ref = this.permUI;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        this.children.push(c);
      }
      x = 140;
      this.loadoutItems = Common.loadout;
      if (this.loadoutItems) {
        _results = [];
        for (i = _j = 0, _ref1 = this.loadoutItems.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          item = this.loadoutItems[i];
          if (item.iconFile) {
            icon = new Coffee2D.Image(item.iconFile);
          } else {
            icon = new Coffee2D.Image('img/icons/default.png');
          }
          icon.setSize(this.iconSize.w, this.iconSize.h);
          icon.setPosition(x, 5);
          icon.addListener('click', this.clickListener(item));
          this.addChild(icon);
          _results.push(x += this.iconSize.w + 10);
        }
        return _results;
      }
    };

    LoadoutPanel.prototype.clickListener = function(item) {
      return (function() {
        return this.onIconClicked(item);
      }).bind(this);
    };

    LoadoutPanel.prototype.onIconClicked = function(item) {
      var myitem, newEvt, tooltipEvt;
      if (Common.state.turn === Common.player) {
        myitem = item;
        tooltipEvt = {
          type: 'updateTooltip',
          item: item
        };
        this.dispatchEvent(tooltipEvt);
        newEvt = {
          type: 'loadoutSelectTarget',
          item: myitem
        };
        return this.dispatchEvent(newEvt);
      }
    };

    return LoadoutPanel;

  })(Component);

}).call(this);
