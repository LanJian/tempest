// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.ItemPanel = (function(_super) {

    __extends(ItemPanel, _super);

    function ItemPanel(panelPosition, panelSize, state) {
      this.panelPosition = panelPosition;
      this.panelSize = panelSize;
      this.state = state;
      ItemPanel.__super__.constructor.call(this, this.panelPosition.x, this.panelPosition.y, this.panelSize.w, this.panelSize.h);
      this.iconSize = {
        w: 35,
        h: 35
      };
      this.selectedUnit;
      this.init();
    }

    ItemPanel.prototype.init = function() {
      this.poly = new Polygon([[0, 0], [0, this.size.h], [this.size.w, this.size.h], [this.size.w, 0]]);
      this.poly.color = 'rgba(240,20,50,0.4)';
      this.addChild(this.poly);
      this.overlay = new Coffee2D.Image('img/selectionOverlay.png');
      return this.overlay.setSize(this.iconSize.w, this.iconSize.h);
    };

    ItemPanel.prototype.updatePanel = function() {
      var armor, unit, weapon, x, _i, _j, _len, _len1, _ref, _ref1;
      this.children = [];
      if (Common.selected instanceof Unit) {
        unit = Common.selected;
        if (unit != null) {
          x = 0;
          if (unit.armors != null) {
            _ref = unit.armors;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              armor = _ref[_i];
              this.addIcon({
                x: x,
                y: 50
              }, armor);
              x = x + this.iconSize.w + 10;
            }
          }
          x = 0;
          if (unit.weapons != null) {
            _ref1 = unit.weapons;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              weapon = _ref1[_j];
              this.addIcon({
                x: x,
                y: 0
              }, weapon);
              x = x + this.iconSize.w + 10;
            }
          }
        }
        return this.show();
      } else {
        return this.hide();
      }
    };

    ItemPanel.prototype.addIcon = function(position, item) {
      var icon;
      if (item.iconFile != null) {
        icon = new Coffee2D.Image(item.iconFile);
      } else {
        icon = new Coffee2D.Image('img/icons/default.png');
      }
      if (item === Common.selected.weaponActive) {
        this.overlay.children = [];
        this.overlay.setPosition(position.x, position.y);
        icon.setSize(this.iconSize.w - 10, this.iconSize.h - 10);
        icon.setPosition(5, 5);
        this.overlay.addChild(icon);
        this.addChild(this.overlay);
      } else {
        icon.setSize(this.iconSize.w, this.iconSize.h);
        icon.setPosition(position.x, position.y);
        this.addChild(icon);
      }
      return icon.addListener('click', this.clickListener(item));
    };

    ItemPanel.prototype.clickListener = function(item) {
      return (function() {
        return this.onIconClicked(item);
      }).bind(this);
    };

    ItemPanel.prototype.onIconClicked = function(item) {
      var tooltipEvt;
      if (item instanceof Weapon) {
        Common.selected.weaponActive = item;
        this.updatePanel();
        if (Common.battleField.state.mode === 'attack') {
          Common.battleField.onSelectAttackTarget();
        }
      }
      tooltipEvt = {
        type: 'updateTooltip',
        item: item
      };
      return this.dispatchEvent(tooltipEvt);
    };

    return ItemPanel;

  })(Component);

}).call(this);
