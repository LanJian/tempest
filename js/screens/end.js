// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.End = (function(_super) {

    __extends(End, _super);

    function End(panelPosition, panelSize, state) {
      this.panelPosition = panelPosition;
      this.panelSize = panelSize;
      this.state = state;
      End.__super__.constructor.call(this, this.panelPosition.x, this.panelPosition.y, this.panelSize.w, this.panelSize.h);
      this.bgVic = new Coffee2D.Image('img/background/victory.png');
      this.bgVic.setSize(this.size.w, this.size.h);
      this.bgVic.setPosition(0, 0);
      this.bgDef = new Coffee2D.Image('img/background/defeat.png');
      this.bgDef.setSize(this.size.w, this.size.h);
      this.bgDef.setPosition(0, 0);
      this.selected = null;
    }

    End.prototype.setMessage = function(message) {
      Common.winStatus = message;
      if (message === 'victory') {
        this.addChild(this.bgVic);
      } else {
        this.addChild(this.bgDef);
      }
      return this.addButton((this.size.w - 130) / 2, this.size.h - 65 - 20, 130, 65, {
        normal: 'img/buttons/restart.png',
        onhover: 'img/buttons/restartH.png'
      }, (function() {
        return window.location.reload(true);
      }).bind(this));
    };

    End.prototype.addButton = function(x, y, w, h, icon, onclick) {
      var button, buttonH, rec;
      button = new Coffee2D.Image(icon.normal);
      button.setSize(w, h);
      button.setPosition(0, 0);
      buttonH = new Coffee2D.Image(icon.onhover);
      buttonH.setSize(w, h);
      buttonH.setPosition(0, 0);
      buttonH.hide();
      rec = new Rect(x, y, w, h);
      rec.color = "rgba(0,0,0,0)";
      rec.addChild(button);
      rec.addChild(buttonH);
      this.addListener('mouseMove', (function(evt) {
        if (rec.isPointInside(evt.x, evt.y)) {
          buttonH.show();
          if (this.selected !== button) {
            Common.audios.switching.play();
            return this.selected = button;
          }
        } else {
          this.selected = null;
          return buttonH.hide();
        }
      }).bind(this));
      button.addListener('click', onclick);
      return this.addChild(rec);
    };

    return End;

  })(Component);

}).call(this);
