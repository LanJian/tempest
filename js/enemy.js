// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Enemy = (function(_super) {

    __extends(Enemy, _super);

    function Enemy() {
      Enemy.__super__.constructor.call(this);
    }

    Enemy.prototype.makeMoveForUnit = function(unit) {
      var battle, closestUnit, col, dist, emptyTile, minDist, playerUnit, row, _i, _len, _ref;
      if (unit.actionTokens < 1) {
        return 'none';
      }
      battle = Common.battleField;
      minDist = 1000;
      closestUnit = null;
      _ref = Common.player.units;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        playerUnit = _ref[_i];
        if (unit.actionTokens > 0) {
          if (unit.canAttack(playerUnit)) {
            battle.unitAttack(unit, playerUnit);
            return 'attack';
          }
        }
        dist = unit.onTile.distanceTo(playerUnit.onTile);
        if (dist < minDist) {
          minDist = dist;
          closestUnit = playerUnit;
        }
      }
      if ((unit.moveTokens > 0) && (closestUnit !== null)) {
        console.log(unit, closestUnit);
        emptyTile = battle.findEmptyTile(closestUnit.onTile, unit);
        if (emptyTile !== null) {
          row = emptyTile.row;
          col = emptyTile.col;
          console.log('Empty Tile', emptyTile, row, '--', col);
          battle.moveUnit(unit, row, col);
          return 'move';
        }
      }
      return 'none';
    };

    Enemy.prototype.makeMoves = function() {
      var i, id, madeMove;
      if ((this.units.length === 0) || (Common.player.units.length === 0)) {
        Common.state.endTurn();
        return;
      }
      i = 0;
      madeMove = false;
      return id = setInterval((function() {
        var unit;
        console.log('action Complete', Common.actionComplete);
        if (Common.actionComplete) {
          unit = this.units[i];
          madeMove = this.makeMoveForUnit(unit);
          while (madeMove === 'none') {
            i++;
            if (i >= this.units.length) {
              Common.state.endTurn();
              clearInterval(id);
              return;
            }
            unit = this.units[i];
            madeMove = this.makeMoveForUnit(unit);
          }
        }
      }).bind(this), 3000);
    };

    return Enemy;

  })(Agent);

}).call(this);
