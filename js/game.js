// Generated by CoffeeScript 1.4.0
(function() {
  var fullSreen,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $(document).ready(function() {
    var game;
    return game = new Game();
  });

  fullSreen = function(canvas) {
    return Common.game.doFullScreen();
  };

  window.Game = (function() {

    function Game() {
      Common.game = this;
      this.scene = null;
      this.battleLogs = [];
      this.inFullScreen = false;
      this.seenResize = false;
      this.init();
    }

    Game.prototype.doFullScreen = function() {
      if (this.canvas.webkitRequestFullScreen) {
        this.canvas.width = screen.width;
        this.canvas.height = screen.height;
        this.sceneSize = {
          w: canvas.width,
          h: canvas.height
        };
        this.resize();
        return this.canvas.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);
      } else {
        return this.canvas.mozRequestFullScreen();
      }
    };

    Game.prototype.exitFullScreen = function() {
      this.canvas.width = 800;
      this.canvas.height = 650;
      this.sceneSize = {
        w: canvas.width,
        h: canvas.height
      };
      return this.resize();
    };

    Game.prototype.resize = function() {
      console.log('resize');
      this.scene.removeChild(this.main);
      this.scene.removeChild(this.end);
      this.scene.removeChild(this.help);
      this.scene.removeChild(this.tooltip);
      this.initTootip();
      this.scene.addChild(this.tooltip);
      this.scene.removeChild(this.logo);
      if (Common.screen === 'battle') {
        this.scene.removeChild(this.cp);
        this.initCPanel();
        this.scene.addChild(this.cp);
      }
      this.initMain();
      this.initEnd();
      this.initLogo();
      this.initHelp();
      console.log('screen', Common.screen);
      switch (Common.screen) {
        case 'help':
          this.scene.addChild(this.help);
          break;
        case 'logo':
          this.scene.addChild(this.logo);
          break;
        case 'main':
          this.scene.addChild(this.main);
          break;
        case 'end':
          this.end.setMessage(Common.winStatus);
          this.scene.addChild(this.end);
      }
      return this.scene.children[0].size = this.sceneSize;
    };

    Game.prototype.init = function() {
      $('#fs').on('click', function() {
        return fullSreen(this.canvas);
      });
      this.canvas = $('#canvas')[0];
      this.sceneSize = {
        w: this.canvas.width,
        h: this.canvas.height
      };
      this.scene = new Scene(this.canvas, 'black');
      Common.scene = this.scene;
      this.scene.addListener('bfObjectReady', (function(evt) {}).bind(this));
      this.initSounds();
      this.initMain();
      this.initHelp();
      this.initTootip();
      this.initEnd();
      this.start();
      return 0;
    };

    Game.prototype.start = function() {
      Common.screen = 'logo';
      this.initLogo();
      this.scene.addChild(this.logo);
      return setTimeout((function() {
        Common.screen = 'main';
        return this.startMain();
      }).bind(this), 3000);
    };

    Game.prototype.startHelp = function() {
      Common.screen = 'help';
      this.reset();
      return this.scene.addChild(this.help);
    };

    Game.prototype.startBattle = function() {
      Common.screen = 'battle';
      this.reset();
      this.audios.bgMusic.play();
      this.initBattle();
      this.initCPanel();
      this.scene.addChild(this.battle);
      this.scene.addChild(this.cp);
      return this.scene.addChild(this.tooltip);
    };

    Game.prototype.endGame = function(message) {
      Common.screen = 'end';
      this.reset();
      this.end.setMessage(message);
      return this.scene.addChild(this.end);
    };

    Game.prototype.startMain = function() {
      this.reset();
      return this.scene.addChild(this.main);
    };

    Game.prototype.initLogo = function() {
      this.logo = new Coffee2D.Image('img/logo.png');
      this.logo.setSize(800, 650);
      return this.logo.setPosition((this.canvas.width - 800) / 2, (this.canvas.height - 650) / 2);
    };

    Game.prototype.initSounds = function() {
      return this.audios = new Audios;
    };

    Game.prototype.initEnd = function() {
      return this.end = new End({
        x: (this.sceneSize.w - 800) / 2,
        y: (this.sceneSize.h - 650) / 2
      }, {
        w: 800,
        h: 650
      });
    };

    Game.prototype.initHelp = function() {
      return this.help = new Help({
        x: (this.sceneSize.w - 800) / 2,
        y: (this.sceneSize.h - 650) / 2
      }, {
        w: 800,
        h: 650
      });
    };

    Game.prototype.initCPanel = function() {
      console.log('x', this.sceneSize.w, 'h', this.sceneSize.h * 0.2);
      return this.cp = new CPanel({
        x: (this.sceneSize.w - 800) / 2,
        y: this.sceneSize.h - 130
      }, {
        w: 800,
        h: 130
      }, Common.state);
    };

    Game.prototype.initMain = function() {
      return this.main = new Main({
        x: (this.sceneSize.w - 800) / 2,
        y: (this.sceneSize.h - 650) / 2
      }, {
        w: 800,
        h: 650
      });
    };

    Game.prototype.initTootip = function() {
      console.log('---', this.sceneSize.w, ',', this.sceneSize.h * 0.2);
      return this.tooltip = new TooltipPanel({
        x: this.sceneSize.w - 240,
        y: 0
      }, {
        w: 240,
        h: 130
      });
    };

    Game.prototype.initBattle = function() {
      var battleState, enemyUnits, playerUnits, u, _i, _j, _len, _len1;
      this.player = new Player();
      this.enemy = new Enemy();
      playerUnits = [new Commander(36, 11), new Soldier(38, 8), new Soldier(38, 14)];
      enemyUnits = [new Commander(7, 14, true), new Soldier(19, 10, true), new Soldier(19, 13, true), new Archer(21, 9, true), new Archer(21, 15, true), new Knight(8, 12, true), new Knight(8, 16, true)];
      for (_i = 0, _len = playerUnits.length; _i < _len; _i++) {
        u = playerUnits[_i];
        this.player.addUnit(u);
      }
      for (_j = 0, _len1 = enemyUnits.length; _j < _len1; _j++) {
        u = enemyUnits[_j];
        this.enemy.addUnit(u);
      }
      battleState = new BattleState(this.player, this.enemy);
      battleState.turn = this.player;
      Common.state = battleState;
      Common.player = this.player;
      Common.enemy = this.enemy;
      Common.game = this;
      return this.makeMap(battleState);
    };

    Game.prototype.makeMap = function(battleState) {
      var apartment, archeryRange, barracks, buildingsSS, castle, counter, d, house, i, j, map, mill, poly, spriteSheet, tile, _i, _j, _k, _l, _len, _ref, _ref1, _ref2, _ref3, _results;
      spriteSheet = new SpriteSheet('img/tileset.png', [
        {
          length: 10,
          cellWidth: 64,
          cellHeight: 64
        }, {
          length: 10,
          cellWidth: 64,
          cellHeight: 64
        }, {
          length: 10,
          cellWidth: 64,
          cellHeight: 64
        }, {
          length: 10,
          cellWidth: 64,
          cellHeight: 64
        }, {
          length: 10,
          cellWidth: 64,
          cellHeight: 64
        }, {
          length: 10,
          cellWidth: 64,
          cellHeight: 64
        }, {
          length: 10,
          cellWidth: 64,
          cellHeight: 64
        }, {
          length: 10,
          cellWidth: 64,
          cellHeight: 64
        }, {
          length: 10,
          cellWidth: 64,
          cellHeight: 64
        }, {
          length: 10,
          cellWidth: 64,
          cellHeight: 64
        }, {
          length: 10,
          cellWidth: 64,
          cellHeight: 64
        }, {
          length: 10,
          cellWidth: 64,
          cellHeight: 64
        }, {
          length: 10,
          cellWidth: 64,
          cellHeight: 64
        }
      ]);
      map = [];
      for (i = _i = 0, _ref = Common.mapSize.row; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        map[i] = [];
        for (j = _j = 0, _ref1 = Common.mapSize.col; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          map[i][j] = new BFTile(spriteSheet, 1, i, j, 32, '', battleState);
        }
      }
      counter = 0;
      _ref2 = Common.mapLayer1;
      for (_k = 0, _len = _ref2.length; _k < _len; _k++) {
        d = _ref2[_k];
        if (d !== 0) {
          tile = map[Math.floor(counter / Common.mapSize.col)][counter % Common.mapSize.col];
          tile.addHeightIndex(d - 321);
          if (_ref3 = d - 321, __indexOf.call((function() {
            _results = [];
            for (_l = 80; _l < 110; _l++){ _results.push(_l); }
            return _results;
          }).apply(this), _ref3) >= 0) {
            tile.setType('water');
          }
        }
        counter += 1;
      }
      poly = new Polygon([[32, 32], [64, 48], [32, 64], [0, 48]]);
      this.battle = new BattleField({
        spriteSheet: spriteSheet,
        tiles: map,
        tileWidth: 64,
        tileHeight: 64,
        tileXOffset: 32,
        tileYOffset: 16,
        tileBoundingPoly: poly
      }, battleState, this.player, this.enemy);
      Common.battleField = this.battle;
      buildingsSS = new SpriteSheet('img/buildings.png', [
        {
          length: 6,
          cellWidth: 256,
          cellHeight: 329
        }, {
          length: 1,
          cellWidth: 455,
          cellHeight: 480
        }
      ]);
      castle = new SpriteImage(buildingsSS, 6);
      apartment = new SpriteImage(buildingsSS, 0);
      house = new SpriteImage(buildingsSS, 2);
      archeryRange = new SpriteImage(buildingsSS, 3);
      barracks = new SpriteImage(buildingsSS, 4);
      mill = new SpriteImage(buildingsSS, 5);
      this.battle.addObject(new BFObject(castle, 7, 7), 0, 11);
      this.battle.addObject(new BFObject(apartment, 4, 4), 0, 18);
      this.battle.addObject(new BFObject(house, 4, 4), 0, 22);
      this.battle.addObject(new BFObject(apartment, 4, 4), 0, 26);
      this.battle.addObject(new BFObject(house, 4, 4), 0, 0);
      this.battle.addObject(new BFObject(apartment, 4, 4), 0, 4);
      this.battle.addObject(new BFObject(apartment, 4, 4), 0, 8);
      this.battle.addObject(new BFObject(house, 4, 4), 5, 19);
      this.battle.addObject(new BFObject(apartment, 4, 4), 5, 25);
      this.battle.addObject(new BFObject(house, 4, 4), 5, 5);
      this.battle.addObject(new BFObject(apartment, 4, 4), 5, 0);
      this.battle.addObject(new BFObject(archeryRange, 4, 4), 11, 25);
      this.battle.addObject(new BFObject(mill, 4, 4), 11, 5);
      this.battle.addObject(new BFObject(house, 4, 4), 11, 0);
      this.battle.addObject(new BFObject(barracks, 4, 4), 17, 1);
      this.battle.addObject(new BFObject(barracks, 4, 4), 17, 25);
      return this.battle.setPosition(-600, -400);
    };

    Game.prototype.reset = function() {
      var bg;
      bg = new Rect(0, 0, this.scene.size.w, this.scene.size.h, 'black');
      return this.scene.children = [bg];
    };

    Game.prototype.changeCursor = function(cursorFile) {
      return canvas.style.cursor = "url(" + cursorFile + "), default";
    };

    Game.prototype.battleLog = function(text) {
      var metrics, t;
      t = new Coffee2D.Text(text, 'rgb(255,122,122)', '15px Arial');
      this.scene.context.font = '15px Arial';
      metrics = this.scene.context.measureText(text);
      t.addChild(new Rect(0, -13, metrics.width + 3, 15, 'rgba(0,0,0,0.7)'));
      this.addBattleLog(t);
      return setTimeout((function() {
        return this.removeBattleLog(t);
      }).bind(this), 3000);
    };

    Game.prototype.addBattleLog = function(t) {
      if (this.battleLogs.length >= 5) {
        this.removeBattleLog(this.battleLogs[0]);
      }
      t.position.y = this.battleLogs.length * 15 + 15;
      this.scene.addChild(t);
      return this.battleLogs.push(t);
    };

    Game.prototype.removeBattleLog = function(t) {
      var i, l, _i, _ref, _results;
      this.scene.removeChild(t);
      this.battleLogs.remove(t);
      _results = [];
      for (i = _i = 0, _ref = this.battleLogs.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        l = this.battleLogs[i];
        _results.push(l.position.y = i * 15 + 15);
      }
      return _results;
    };

    Game.prototype.floatText = function(t) {
      this.scene.addChild(t);
      return setTimeout((function() {
        return this.scene.removeChild(t);
      }).bind(this), 3000);
    };

    return Game;

  })();

}).call(this);
